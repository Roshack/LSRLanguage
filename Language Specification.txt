*****************
Language Name
*****************
Everybody knows that naming is the most important part of programming!
I named my language LSR for two reasons:
1. It is the first initials of my siblings and I in descending age order.
2. In spoken language it can be referred to as LASER and thats cool.

****************
Important Notes
****************
The interpreter is bad. It doesn't type check most of the time and even when
it does it just prints out a statement yelling at you but keeps on running.
Unfortunately the onus is on the programmer not do a lot of bad things like
assign between types, or try and access a member variable that doesn't have that
member, or instantiate a varaible with a class that isn't defined.

I'm sorry :S

*************************
Why I deserve some marks
*************************
The language DOES actually allocate objects using the GC and the GC does actually correctly revoke objects! A good test of this is the whilegc.lsr or nestwhilegc.lsr

So in that sense despite not having a lot of things I wish I had or should have, I did at least create an interpreter for a garbage collected language ^_^


***************
Object Definition
***************
class <classname> { <varType> <varName>; }

Vartypes for classes: int, classnames. Strings not allowed in classes!


***************
function definition

functions can only be void :(
***************
fn void <name>(<paramlist>) {
    <stmts>
}

<fntype> can be void or int.
<paramlist> is a list of <vartype> <varname> pairs seperated by commas.


UNFORTUNATELY: functions don't work recursively. I didn't have time to add this,
and the reason its different than non recursive fucnctions is because I completely
forgot how to build an interpreter for the first half of this project until I got
to while loops and realized I needed some way of storing 'code' to be executed at
a later point. Blah.

***************
Main definition
***************
fnmain void main() {
    <statements>
}

**********
STATEMENTS
**********

    Declaration:
    -----------------------
    <varType> <varName>;
    <varType> <varName> = <expr>;
    -----------------------

    print:
    -----------------------
    print(<expr>); (Prints the expression without new line).
    println(<expr>); (prints the expr with a new line).
    -----------------------

    assign: *Note all objects are references so if you do a = b then b.lhs = 5 a.lhs will also now be 5
    ------------------------
    <varName> = <expr>;
    <varName>.<member> = <expr>; (if <varName> is an object).
    ------------------------

    while:
    -----------------------
    while(<condition>) {
        <stmts>
    };
    -----------------------


**********
CONDITIONS
**********
<expr> conditionalOp <expr>
Allowed conditional operators: <

yeah... only less than... I'm sorry...

**********
Expressions
**********
<varname>
<varname>.<varname>... (keep member accessing as long as it's valid)
IntegerLiteral
StringLiteral
(<expr>) 
<expr> + <expr>



